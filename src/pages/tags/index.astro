---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../../consts";

const posts = (await getCollection("blog")).sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);
const tags = posts
  .flatMap((post: CollectionEntry<"blog">) => post.data.tags || [])
  .filter((tag: string, index: number, self: string[]) => 
    tag !== undefined && self.indexOf(tag) === index
  ) as string[];

// タグごとの投稿数を計算
const tagCounts: Record<string, number> = posts.reduce((acc, post) => {
  post.data.tags?.forEach((tag) => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);
---

<style is:global>
  /* 初期状態で要素を非表示に */
  .fade-in {
    opacity: 0;
    visibility: hidden;
  }
</style>

<!doctype html>
<html lang="en" class="min-h-dvh">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-61T79P21HB"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-61T79P21HB');
    </script>
  </head>
  <body class="w-full flex flex-col mx-auto min-h-dvh justify-between dark:bg-neutral-800 dark:text-neutral-300 transition-colors duration-300">
    <Header />
    <main class="w-full my-auto lg:mt-28 mt-20 max-w-screen-md mx-auto flex flex-col gap-8 justify-center px-4">
      <div class="text-center mb-8 fade-in">
        <h1 class="text-4xl font-bold text-gray-800 dark:text-white mb-4">タグ一覧</h1>
        <p class="text-gray-600 dark:text-gray-400">記事のカテゴリーごとに閲覧できます</p>
      </div>

      <ul class="grid grid-cols-2 md:grid-cols-3 gap-4">
        {tags.map(tag => (
          <li class="tag-item fade-in">
            <a href={`/tags/${tag}`} 
               class="group block p-4 rounded-xl bg-white dark:bg-neutral-900 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-neutral-700">
              <div class="flex items-center justify-between">
                <span class="text-primary font-medium">#{tag}</span>
                <span class="bg-primary/10 text-primary px-2 py-1 rounded-full text-sm">
                  {tagCounts[tag]}
                </span>
              </div>
              <div class="mt-2 h-1 w-0 group-hover:w-full bg-primary/30 transition-all duration-300"></div>
            </a>
          </li>
        ))}
      </ul>
    </main>
    <Footer />
  </body>
</html>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  // ページ読み込み直後にスタイルを適用
  document.addEventListener('DOMContentLoaded', () => {
    gsap.set('.fade-in', { 
      opacity: 0,
      visibility: 'visible' // visibilityを表示状態に
    });
  });

  // スクロールトリガーのアニメーション
  window.addEventListener('load', () => {
    gsap.from('.text-center', {
      scrollTrigger: {
        trigger: '.text-center',
        start: 'top 80%',
      },
      y: 30,
      opacity: 0,
      duration: 0.8,
      ease: 'power2.out',
      onStart: () => {
        gsap.set('.text-center', { visibility: 'visible' });
      }
    });

    gsap.from('.tag-item', {
      scrollTrigger: {
        trigger: '.tag-item',
        start: 'top 80%',
      },
      y: 30,
      opacity: 0,
      duration: 0.6,
      stagger: 0.1,
      ease: 'power2.out',
      onStart: () => {
        gsap.set('.tag-item', { visibility: 'visible' });
      }
    });
  });
</script>
